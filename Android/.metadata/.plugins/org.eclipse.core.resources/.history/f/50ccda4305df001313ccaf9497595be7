package com.xpto.manyfest.utils;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Typeface;
import android.graphics.drawable.AnimationDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Vibrator;
import android.util.TypedValue;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.Transformation;
import android.view.inputmethod.InputMethodManager;
import android.widget.Adapter;
import android.widget.ImageView;
import android.widget.TextView;

public class Util {
	private static Typeface tfDefaultThin;
	private static Typeface tfDefaultLight;
	private static Typeface tfDefaultRegular;
	private static Typeface tfDefaultBold;

	// Returns/Load the app's default font
	public static Typeface getDefaultFont(Context context, int type) {
		if (tfDefaultThin == null) {
			tfDefaultThin = Typeface.createFromAsset(context.getAssets(), "fonts/proxima_nova_thin.ttf");
			tfDefaultLight = Typeface.createFromAsset(context.getAssets(), "fonts/proxima_nova_light.ttf");
			tfDefaultRegular = Typeface.createFromAsset(context.getAssets(), "fonts/proxima_nova_regular.ttf");
			tfDefaultBold = Typeface.createFromAsset(context.getAssets(), "fonts/proxima_nova_bold.ttf");
		}

		switch (type) {
		case 0:
			return tfDefaultThin;
		case 1:
			return tfDefaultLight;
		default:
		case 2:
			return tfDefaultRegular;
		case 3:
			return tfDefaultBold;
		}
	}

	// Do custom loading animation
	public static void animateLoading(final ImageView ivloading) {
		if (ivloading == null)
			return;

		new AnimationDrawable();

		ivloading.setBackgroundResource(R.drawable.loading);
		ivloading.post(new Runnable() {
			@Override
			public void run() {
				Drawable drawable = ivloading.getBackground();
				if (drawable != null && drawable instanceof AnimationDrawable) {
					((AnimationDrawable) drawable).start();
				}
			}
		});
	}

	// Set the default font for view and its children
	public static void loadFonts(View view) {
		if (view instanceof TextView) {
			int type = 2;

			if (view.getTag() != null) {
				try {
					if ("t".equals(view.getTag()))
						type = 0;
					else if ("l".equals(view.getTag()))
						type = 1;
					else if ("b".equals(view.getTag()))
						type = 3;
				} catch (Exception ex) {
				}
			}

			// Set font to components
			((TextView) view).setTypeface(getDefaultFont(view.getContext(), type));
		} else if (view instanceof ViewGroup) {
			// Search for children to set font recursively
			for (int i = 0; i < ((ViewGroup) view).getChildCount(); i++)
				loadFonts(((ViewGroup) view).getChildAt(i));
		}
	}

	public static void removeRow(final Adapter<?> adp, final View row, final int position) {
		final int initialHeight = row.getHeight();

		Animation animation = new Animation() {
			@Override
			protected void applyTransformation(float interpolatedTime, Transformation t) {
				super.applyTransformation(interpolatedTime, t);
				int newHeight = (int) (initialHeight * (1 - interpolatedTime));
				if (newHeight > 0) {
					row.getLayoutParams().height = newHeight;
					row.requestLayout();
				}
			}
		};
		animation.setAnimationListener(new AnimationListener() {
			@Override
			public void onAnimationStart(Animation animation) {
			}

			@Override
			public void onAnimationRepeat(Animation animation) {
			}

			@Override
			public void onAnimationEnd(Animation animation) {
				row.getLayoutParams().height = initialHeight;
				row.requestLayout();
				adp.remove(position);
				adp.notifyDataSetChanged();
			}
		});
		animation.setDuration(500 - position);
		row.startAnimation(animation);
	}

	public static void getAddress(Activity _activity, Callback _callback, Callback _retryCallback, Callback _failCallback, String _address) {
		// Make google api call
		String url = DTOConstraints.URL_GOOGLEAPI_ADD + _address.replace(' ', '+');

		// Do the call and cache it for a day
		DALWSCaller.asyncCall(_activity, _callback, _retryCallback, _failCallback, url, null, null, DALWSCaller.WS_CACHE_1DAY, 2, false);
	}

	public static void getAddress(Activity _activity, Callback _callback, Callback _retryCallback, Callback _failCallback, double _lat, double _lon) {
		// Make google api call
		String url = DTOConstraints.URL_GOOGLEAPI_GEO + (_lat + "").replace(",", ".") + "," + (_lon + "").replace(",", ".");

		// Do the call and cache it for a day
		DALWSCaller.asyncCall(_activity, _callback, _retryCallback, _failCallback, url, null, null, DALWSCaller.WS_CACHE_1DAY, 2, false);
	}

	public static float distance(double lat1, double lng1, double lat2, double lng2) {
		double earthRadius = 3958.75;
		double dLat = Math.toRadians(lat2 - lat1);
		double dLng = Math.toRadians(lng2 - lng1);
		double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) * Math.sin(dLng / 2)
				* Math.sin(dLng / 2);
		double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
		double dist = earthRadius * c;

		int meterConversion = 1609;

		return (float) (dist * meterConversion);
	}

	public static void showKeyboard(View view) {
		if (view == null)
			return;

		((InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE)).showSoftInput(view, InputMethodManager.SHOW_IMPLICIT);
	}

	public static void hideKeyboard(View view) {
		if (view == null)
			return;

		((InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(view.getWindowToken(), 0);
	}

	public static Bitmap fastblur(Bitmap sentBitmap, int radius) {
		// Stack Blur v1.0 from
		// http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html
		//
		// Java Author: Mario Klingemann <mario at quasimondo.com>
		// http://incubator.quasimondo.com
		// created Feburary 29, 2004
		// Android port : Yahel Bouaziz <yahel at kayenko.com>
		// http://www.kayenko.com
		// ported april 5th, 2012

		// This is a compromise between Gaussian Blur and Box blur
		// It creates much better looking blurs than Box Blur, but is
		// 7x faster than my Gaussian Blur implementation.
		//
		// I called it Stack Blur because this describes best how this
		// filter works internally: it creates a kind of moving stack
		// of colors whilst scanning through the image. Thereby it
		// just has to add one new block of color to the right side
		// of the stack and remove the leftmost color. The remaining
		// colors on the topmost layer of the stack are either added on
		// or reduced by one, depending on if they are on the right or
		// on the left side of the stack.
		//
		// If you are using this algorithm in your code please add
		// the following line:
		//
		// Stack Blur Algorithm by Mario Klingemann <mario@quasimondo.com>

		Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);

		if (radius < 1) {
			return (null);
		}

		int w = bitmap.getWidth();
		int h = bitmap.getHeight();

		int[] pix = new int[w * h];
		// Log.e("pix", w + " " + h + " " + pix.length);
		bitmap.getPixels(pix, 0, w, 0, 0, w, h);

		int wm = w - 1;
		int hm = h - 1;
		int wh = w * h;
		int div = radius + radius + 1;

		int r[] = new int[wh];
		int g[] = new int[wh];
		int b[] = new int[wh];
		int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;
		int vmin[] = new int[Math.max(w, h)];

		int divsum = (div + 1) >> 1;
		divsum *= divsum;
		int dv[] = new int[256 * divsum];
		for (i = 0; i < 256 * divsum; i++) {
			dv[i] = (i / divsum);
		}

		yw = yi = 0;

		int[][] stack = new int[div][3];
		int stackpointer;
		int stackstart;
		int[] sir;
		int rbs;
		int r1 = radius + 1;
		int routsum, goutsum, boutsum;
		int rinsum, ginsum, binsum;

		for (y = 0; y < h; y++) {
			rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
			for (i = -radius; i <= radius; i++) {
				p = pix[yi + Math.min(wm, Math.max(i, 0))];
				sir = stack[i + radius];
				sir[0] = (p & 0xff0000) >> 16;
				sir[1] = (p & 0x00ff00) >> 8;
				sir[2] = (p & 0x0000ff);
				rbs = r1 - Math.abs(i);
				rsum += sir[0] * rbs;
				gsum += sir[1] * rbs;
				bsum += sir[2] * rbs;
				if (i > 0) {
					rinsum += sir[0];
					ginsum += sir[1];
					binsum += sir[2];
				} else {
					routsum += sir[0];
					goutsum += sir[1];
					boutsum += sir[2];
				}
			}
			stackpointer = radius;

			for (x = 0; x < w; x++) {

				r[yi] = dv[rsum];
				g[yi] = dv[gsum];
				b[yi] = dv[bsum];

				rsum -= routsum;
				gsum -= goutsum;
				bsum -= boutsum;

				stackstart = stackpointer - radius + div;
				sir = stack[stackstart % div];

				routsum -= sir[0];
				goutsum -= sir[1];
				boutsum -= sir[2];

				if (y == 0) {
					vmin[x] = Math.min(x + radius + 1, wm);
				}
				p = pix[yw + vmin[x]];

				sir[0] = (p & 0xff0000) >> 16;
				sir[1] = (p & 0x00ff00) >> 8;
				sir[2] = (p & 0x0000ff);

				rinsum += sir[0];
				ginsum += sir[1];
				binsum += sir[2];

				rsum += rinsum;
				gsum += ginsum;
				bsum += binsum;

				stackpointer = (stackpointer + 1) % div;
				sir = stack[(stackpointer) % div];

				routsum += sir[0];
				goutsum += sir[1];
				boutsum += sir[2];

				rinsum -= sir[0];
				ginsum -= sir[1];
				binsum -= sir[2];

				yi++;
			}
			yw += w;
		}
		for (x = 0; x < w; x++) {
			rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
			yp = -radius * w;
			for (i = -radius; i <= radius; i++) {
				yi = Math.max(0, yp) + x;

				sir = stack[i + radius];

				sir[0] = r[yi];
				sir[1] = g[yi];
				sir[2] = b[yi];

				rbs = r1 - Math.abs(i);

				rsum += r[yi] * rbs;
				gsum += g[yi] * rbs;
				bsum += b[yi] * rbs;

				if (i > 0) {
					rinsum += sir[0];
					ginsum += sir[1];
					binsum += sir[2];
				} else {
					routsum += sir[0];
					goutsum += sir[1];
					boutsum += sir[2];
				}

				if (i < hm) {
					yp += w;
				}
			}
			yi = x;
			stackpointer = radius;
			for (y = 0; y < h; y++) {
				// Preserve alpha channel: ( 0xff000000 & pix[yi] )
				pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];

				rsum -= routsum;
				gsum -= goutsum;
				bsum -= boutsum;

				stackstart = stackpointer - radius + div;
				sir = stack[stackstart % div];

				routsum -= sir[0];
				goutsum -= sir[1];
				boutsum -= sir[2];

				if (x == 0) {
					vmin[y] = Math.min(y + r1, hm) * w;
				}
				p = x + vmin[y];

				sir[0] = r[p];
				sir[1] = g[p];
				sir[2] = b[p];

				rinsum += sir[0];
				ginsum += sir[1];
				binsum += sir[2];

				rsum += rinsum;
				gsum += ginsum;
				bsum += binsum;

				stackpointer = (stackpointer + 1) % div;
				sir = stack[stackpointer];

				routsum += sir[0];
				goutsum += sir[1];
				boutsum += sir[2];

				rinsum -= sir[0];
				ginsum -= sir[1];
				binsum -= sir[2];

				yi += w;
			}
		}

		// Log.e("pix", w + " " + h + " " + pix.length);
		bitmap.setPixels(pix, 0, w, 0, 0, w, h);

		return (bitmap);
	}

	// Validate if string is email
	public static boolean isEmail(CharSequence email) {
		return android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();
	}

	@SuppressLint("SimpleDateFormat")
	public static Date parseJSONDate(String jsonDate) {
		try {
			jsonDate = jsonDate.trim();

			if (jsonDate.contains("(")) {
				String timeString = jsonDate.substring(jsonDate.indexOf("(") + 1, jsonDate.indexOf(")"));
				String[] timeSegments;
				int timeZoneOffSet;
				if (timeString.contains("+")) {
					timeSegments = timeString.split("\\+");
					timeZoneOffSet = Integer.valueOf(timeSegments[1]) * 36000; // (("0100" / 100) * 3600 * 1000)
				} else {
					timeSegments = timeString.split("\\-");
					timeZoneOffSet = Integer.valueOf(timeSegments[1]) * -36000; // (("0100" / 100) * 3600 * 1000)
				}
				long millis = Long.valueOf(timeSegments[0]);
				return new Date(millis + timeZoneOffSet);
			} else {
				if (jsonDate.indexOf(' ') - jsonDate.lastIndexOf('/') == 3)
					return new SimpleDateFormat("dd/MM/yy hh:mm").parse(jsonDate);
				else
					return new SimpleDateFormat("dd/MM/yyyy hh:mm").parse(jsonDate);
			}
		} catch (Exception e) {
			return new Date();
		}
	}

	public static String formatToLongDateTime(Date value) {
		return new SimpleDateFormat("dd/MM/yyyy - HH:mm", Locale.getDefault()).format(value);
	}

	public static String formatToMoney(String value) {
		try {
			value = value.replace(".", "").replace(",", "");
			double money = Double.parseDouble(value) / 100;
			if (money < 1)
				return (int) (money * 100) + "";
			else
				return formatToMoney(Double.parseDouble(value) / 100);
		} catch (Exception e) {
			return null;
		}
	}

	public static String formatToMoney(double value) {
		return formatToMoney(null, value);
	}

	public static String formatToMoney(Context context, double value) {
		String decimals = "" + (int) Math.round(value % 1 * 100);
		while (decimals.length() < 2)
			decimals = "0" + decimals;

		String integers = "" + (int) value;
		String compose = "";

		for (int i = integers.length() - 1; i >= 0; i--)
			compose = integers.charAt(i) + (compose.length() > 0 && compose.length() % 3 == 0 ? "." : "") + compose;

		String moneySymbol = (context == null ? "" : context.getString(R.string.f_money_symbol) + " ");
		return moneySymbol + compose + "," + decimals;
	}

	public static float convertDpToPx(Context context, int dp) {
		Resources r = context.getResources();
		return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, r.getDisplayMetrics());
	}

	public static float convertPxToDp(Context context, float px) {
		Resources r = context.getResources();
		return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_PX, px, r.getDisplayMetrics());
	}

	public static void vibrate(Context context, long milisegundos) {
		Vibrator rr = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);
		rr.vibrate(milisegundos);
	}

	public static void openPlayStore(Activity activity) {
		final String appPackageName = activity.getPackageName();
		try {
			activity.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + appPackageName)));
		} catch (Exception e) {
			activity.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("http://play.google.com/store/apps/details?id=" + appPackageName)));
		}
	}
}
